datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  email              String               @unique
  password           String
  firstname          String?
  lastname           String?
  channelsAuthor     Channel[]
  channelsMember     UserOnChannel[]
  issueTrackerMember IssueTrackerMember[]
  role               Role
}

model Channel {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  title       String
  description String?
  trackers    IssueTracker[]
  categories  ChannelCategory[]
  author      User              @relation(fields: [authorId], references: [id])
  authorId    String
  members     UserOnChannel[]
  inviteLink  String            @unique
}

model UserOnChannel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
}

model ChannelCategory {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  title     String
  channel   Channel        @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  trackers  IssueTracker[]
}

model IssueTrackerMember {
  id                 String        @id @default(cuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  tracker            IssueTracker  @relation(fields: [trackerId], references: [id], onDelete: Cascade)
  trackerId          String
  reportsAuthor      IssueReport[] @relation(name: "IssueReport_author")
  reportsResponsible IssueReport[] @relation(name: "IssueReport_responsiblePerson")
  role               MemberRole
  comments           Comment[]
}

model IssueTracker {
  id          String               @id @default(cuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  channel     Channel              @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId   String
  category    ChannelCategory      @relation(fields: [categoryId], references: [id])
  categoryId  String
  members     IssueTrackerMember[]
  reports     IssueReport[]
  title       String
  description String?
}

model IssueReport {
  id                  String              @id @default(cuid())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  tracker             IssueTracker        @relation(fields: [trackerId], references: [id], onDelete: Cascade)
  trackerId           String
  author              IssueTrackerMember  @relation(name: "IssueReport_author", fields: [authorId], references: [id])
  authorId            String
  responsiblePerson   IssueTrackerMember  @relation(name: "IssueReport_responsiblePerson", fields: [responsiblePersonId], references: [id])
  responsiblePersonId String
  title               String
  description         String?
  priority            IssueReportPriority
  status              IssueReportStatus
  type                IssueReportType
  comments            Comment[]
}

model Comment {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  content   String
  report    IssueReport        @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId  String
  author    IssueTrackerMember @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}

enum Role {
  ADMIN
  USER
}

enum MemberRole {
  GUEST
  DEV
  QA
}

enum IssueReportStatus {
  FULFILMENT
  DISCUSSION
  TO_APPROVE
  READY
  CLOSED
}

enum IssueReportPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum IssueReportType {
  FUNCTIONALITY
  UI
  VULNERABILITY
  REPORTING
}
